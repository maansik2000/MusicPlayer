[{"E:\\Projects\\musicapp\\src\\index.js":"1","E:\\Projects\\musicapp\\src\\App.js":"2","E:\\Projects\\musicapp\\src\\reportWebVitals.js":"3","E:\\Projects\\musicapp\\src\\component\\Player.js":"4","E:\\Projects\\musicapp\\src\\component\\Song.js":"5","E:\\Projects\\musicapp\\src\\component\\Library.js":"6","E:\\Projects\\musicapp\\src\\component\\LibrarySong.js":"7","E:\\Projects\\musicapp\\src\\component\\Nav.js":"8","E:\\Projects\\musicapp\\src\\data.js":"9"},{"size":478,"mtime":1608726396491,"results":"10","hashOfConfig":"11"},{"size":2359,"mtime":1617877920242,"results":"12","hashOfConfig":"11"},{"size":362,"mtime":499162500000,"results":"13","hashOfConfig":"11"},{"size":3942,"mtime":1609180221627,"results":"14","hashOfConfig":"11"},{"size":365,"mtime":1608910062170,"results":"15","hashOfConfig":"11"},{"size":1007,"mtime":1609004248250,"results":"16","hashOfConfig":"11"},{"size":1037,"mtime":1609180306805,"results":"17","hashOfConfig":"11"},{"size":463,"mtime":1617877978508,"results":"18","hashOfConfig":"11"},{"size":4841,"mtime":1621419381171,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"3npky1",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"22"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"22"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"E:\\Projects\\musicapp\\src\\index.js",[],["41","42"],"E:\\Projects\\musicapp\\src\\App.js",[],"E:\\Projects\\musicapp\\src\\reportWebVitals.js",[],"E:\\Projects\\musicapp\\src\\component\\Player.js",["43","44","45","46","47"],"//control player\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faPlay, faAngleLeft, faAngleRight, faPause } from '@fortawesome/free-solid-svg-icons';\r\nimport React, { forwardRef, useEffect, useState} from 'react';\r\n\r\nconst Player = ({currentSong, \r\n    isPlaying, \r\n    setPlaying,\r\n    audioRef,\r\n    setsongInfo,\r\n    songInfo,\r\n    songs,\r\n    setCurrentSong,\r\n    setSongs\r\n}) => {\r\n    //use Effect\r\n    useEffect(() =>{\r\n            const newSong = songs.map((song) =>{\r\n                if(song.id ==currentSong.id){\r\n                    return{\r\n                        ...song,\r\n                        active:true,\r\n                    }\r\n                }else{\r\n                    return{\r\n                        ...song,\r\n                        active : false,\r\n                    }\r\n                }\r\n            })\r\n            setSongs(newSong)\r\n           \r\n    },[currentSong])\r\n    //eventhandler\r\n    function playSong(){\r\n      if(isPlaying){\r\n          audioRef.current.pause();\r\n          setPlaying(false)\r\n      }else{\r\n          audioRef.current.play();\r\n          setPlaying(true)\r\n      }\r\n    }\r\n\r\n\r\n    const getTime = (time) =>{\r\n        return(\r\n            Math.floor(time / 60)+ \":\" + (\"0\" + Math.floor(time % 60)).slice(-2)\r\n        );\r\n    }\r\n\r\n    const drag = (e) =>{\r\n        audioRef.current.currentTime= e.target.value;\r\n        setsongInfo({...songInfo, currentTime : e.target.value});\r\n    }\r\n\r\n   const skiptrackHandler = async (direction) =>{\r\n        let currentIndex = songs.findIndex((song) =>\r\n            song.id === currentSong.id)\r\n\r\n            if(direction === \"skip-forward\"){\r\n                await setCurrentSong(songs[(currentIndex + 1)% songs.length])\r\n            }\r\n            console.log(currentIndex+1)\r\n            if(direction === \"skip-back\"){\r\n                if((currentIndex - 1) % songs.length === -1){\r\n                    setCurrentSong(songs[songs.length - 1]);\r\n                    if(isPlaying) audioRef.current.play();\r\n                    return;\r\n                }\r\n                setCurrentSong(songs[(currentIndex - 1)% songs.length])\r\n            }\r\n            if(isPlaying) audioRef.current.play();\r\n   }\r\n\r\n   const trankAnim = {\r\n       transform : `translateX(${songInfo.animationPercentage}%)`\r\n   }\r\n\r\n    return(\r\n        <div className = \"player\">\r\n\r\n            <div className=\"time-control\">\r\n                <p>{getTime(songInfo.currentTime)}</p>\r\n                <div style={{background:`linear-gradient(to right,${currentSong.color[0]},${currentSong.color[1]})`}}className=\"track\">\r\n                <input \r\n                    min={0}\r\n                    max={songInfo.duration || 0} \r\n                    onChange={drag} \r\n                    value={songInfo.currentTime} \r\n                    type=\"range\" \r\n                />\r\n                    <div style={trankAnim}className=\"animate-track\"></div>\r\n                </div> \r\n                <p>{songInfo.duration ? getTime(songInfo.duration) : '0:00'}</p>\r\n            </div>\r\n\r\n            <div className=\"play-control\">\r\n            <FontAwesomeIcon \r\n                    className=\"skip-back\" \r\n                    icon={faAngleLeft}\r\n                    onClick={() => skiptrackHandler('skip-back')}\r\n                    size=\"2x\"\r\n                />\r\n                <FontAwesomeIcon \r\n                    className=\"play\" \r\n                    icon={faPlay}\r\n                    size=\"2x\"\r\n                    onClick={playSong}\r\n                    icon = {isPlaying ? faPause : faPlay}\r\n                />\r\n                <FontAwesomeIcon \r\n                    className=\"skip-forward\" \r\n                    icon={faAngleRight}\r\n                    size=\"2x\"\r\n                    onClick={() => skiptrackHandler('skip-forward')}\r\n                />\r\n               \r\n            </div> \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Player;\r\n\r\n\r\n","E:\\Projects\\musicapp\\src\\component\\Song.js",[],"E:\\Projects\\musicapp\\src\\component\\Library.js",[],"E:\\Projects\\musicapp\\src\\component\\LibrarySong.js",["48"],"//song , artist, song name, and all\r\n\r\nimport React from 'react';\r\n\r\n\r\nconst LibrarySong = ({song, setCurrentSong,songs,id,audioRef,isPlaying,setSongs}) => {\r\n    const songSelectHandler = async () =>{\r\n        const newSong = songs.map((song) =>{\r\n            if(song.id == id){\r\n                return{\r\n                    ...song,\r\n                    active:true,\r\n                }\r\n            }else{\r\n                return{\r\n                    ...song,\r\n                    active : false,\r\n                }\r\n            }\r\n        })\r\n        setSongs(newSong)\r\n        await setCurrentSong(song)\r\n        if(isPlaying) audioRef.current.play();\r\n        \r\n    }\r\n    return(\r\n        <div onClick={songSelectHandler} className ={`library-song ${song.active ? 'selected' : \"\"}`}>\r\n            <img alt={song.name} src={song.cover}></img>\r\n            <div className=\"desciption\">\r\n            <h3>{song.name}</h3>\r\n            <h4>{song.artist}</h4>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LibrarySong;","E:\\Projects\\musicapp\\src\\component\\Nav.js",[],"E:\\Projects\\musicapp\\src\\data.js",[],{"ruleId":"49","replacedBy":"50"},{"ruleId":"51","replacedBy":"52"},{"ruleId":"53","severity":1,"message":"54","line":4,"column":17,"nodeType":"55","messageId":"56","endLine":4,"endColumn":27},{"ruleId":"53","severity":1,"message":"57","line":4,"column":40,"nodeType":"55","messageId":"56","endLine":4,"endColumn":48},{"ruleId":"58","severity":1,"message":"59","line":19,"column":28,"nodeType":"60","messageId":"61","endLine":19,"endColumn":30},{"ruleId":"62","severity":1,"message":"63","line":33,"column":7,"nodeType":"64","endLine":33,"endColumn":20,"suggestions":"65"},{"ruleId":"66","severity":1,"message":"67","line":110,"column":21,"nodeType":"68","endLine":110,"endColumn":58},{"ruleId":"58","severity":1,"message":"59","line":9,"column":24,"nodeType":"60","messageId":"61","endLine":9,"endColumn":26},"no-native-reassign",["69"],"no-negated-in-lhs",["70"],"no-unused-vars","'forwardRef' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'setSongs' and 'songs'. Either include them or remove the dependency array. If 'setSongs' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["71"],"react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","no-global-assign","no-unsafe-negation",{"desc":"72","fix":"73"},"Update the dependencies array to be: [currentSong, setSongs, songs]",{"range":"74","text":"75"},[915,928],"[currentSong, setSongs, songs]"]